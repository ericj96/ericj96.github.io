---
title: "Classification"
author: "Eric Jackson"
date: "2023-10-01"
categories: [code, analysis]
image: "image.jpg"
toc: true
toc-depth: 2
---

# Background

Classification is similar to clustering ([as mentioned in this blog post](https://ericj96.github.io/posts/Clustering/)) in the sense that they group data together into separate categories. The difference comes from the fact that classification has a predefined set of labels that are attached to each data point, and in clustering the labels are missing and the algorithm will apply those labels/groupings. These two topics are commonly referenced as supervised and unsupervised learning (classification vs clustering).

Some of the downsides of classification are that there is a need to train the model before using it with test data, whereas clustering does not require such training and can group data points together immediately. But, classification can be used for much more intensive scenarios, such as handwriting recognition and spam filtering.

As mentioned before, classification algorithms or models require inputs with labels predefined. For this blog post, a native sklearn dataset containing measurements of a species of flower will be used. As seen below, there are width and length measurements along with the label/target for the species of flower.

```{python}
#| code-fold: true
#| code-summary: Setup/imports

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.datasets import load_iris
```

```{python}
iris=load_iris()
df = pd.DataFrame(iris['data'],columns = iris['feature_names'])
target=pd.DataFrame(iris['target'])
target[target==0]=iris.target_names[0]
target[target==1]=iris.target_names[1]
target[target==2]=iris.target_names[2]
df['target']=target
```

```{python}
#| echo: false
df
```

Before the data is to be run through any classification algorithms, it is helpful to first plot the data and review what to expect. @fig-class shows the dataset visually with each color representing a different label or species of flower.

```{python}
#| code-fold: true
#| code-summary: Plotting code
#| fig-cap: Dataset values broken into their defined target labels
#| label: fig-class

fig, axs = plt.subplots(figsize =(9, 6))
plt.scatter(df['petal length (cm)'][df['target']==iris.target_names[0]],df['petal width (cm)'][df['target']==iris.target_names[0]])
plt.scatter(df['petal length (cm)'][df['target']==iris.target_names[1]],df['petal width (cm)'][df['target']==iris.target_names[1]])
plt.scatter(df['petal length (cm)'][df['target']==iris.target_names[2]],df['petal width (cm)'][df['target']==iris.target_names[2]])
plt.xlabel('petal length (cm)')
plt.ylabel('petal width (cm)')
plt.legend(iris.target_names)
plt.show()
```

## Classification Algorithms

Naive Bayes

GMM

some neural net?

https://www.pycodemates.com/2022/05/iris-dataset-classification-with-python.html
