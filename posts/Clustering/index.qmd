---
title: "Clustering"
author: "Eric Jackson"
date: "2023-10-01"
categories: [clustering]
image: "image.jpg"
toc: true
toc-depth: 2
---

# Background

Clustering is an

```{python}
#| code-fold: true
#| code-summary: Setup and imports
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs,make_circles
from sklearn import cluster 
from sklearn.cluster import KMeans,DBSCAN
from itertools import cycle, islice
from sklearn.metrics import confusion_matrix,accuracy_score
```

# Clustering Algorithms

## Density-Based Spatial Clustering of Applications with Noise (DBSCAN)

As explored in the [blog post on anomaly/outlier detection](https://ericj96.github.io/posts/Anomaly_Outlier_Detection/), the DBSCAN algorithm is a widely used machine learning algorithm for clustering given sets of points by grouping together points that are close together and have multiple nearest neighbors. While creating the clusters of the data, it will naturally identify outliers and thus, is a great algorithm to accomplish both outlier detection and clustering.

```{python}
noisy_circles = make_circles(n_samples=2500, factor=0.5, noise=0.05)
x=noisy_circles[0]
y=noisy_circles[1]
dbscan=DBSCAN(eps=0.2)
dbscan.fit(x)
colors = dbscan.labels_
y_pred_dbscan=colors
```

## Affinity Propagation

```{python}
affinity_propagation = cluster.AffinityPropagation(damping=.9,preference=-300)
affinity_propagation.fit(x)
y_pred_af=affinity_propagation.labels_
```

## BIRCH

```{python}
birch = cluster.Birch(n_clusters=2)
birch.fit(x)
y_pred_birch=birch.labels_
```

## Spectral Clustering

```{python}
spectral = cluster.SpectralClustering(n_clusters=2)
spectral.fit(x)   
y_pred_spectral=spectral.labels_
```

# Conclusion

```{python}
#| code-fold: true
#| code-summary: All 4 subplot code
fig, ax = plt.subplots(2,2,figsize=(9,8))
ax1=plt.subplot(221)
plt.scatter(x[:,0],x[:,1],c=y_pred_dbscan)
plt.title('DBSCAN')
ax1=plt.subplot(222)
plt.scatter(x[:,0],x[:,1],c=y_pred_af)
plt.title('Affinity Propagation')
ax1=plt.subplot(223)
plt.scatter(x[:,0],x[:,1],c=y_pred_birch)
plt.title('BIRCH')
ax1=plt.subplot(224)
plt.scatter(x[:,0],x[:,1],c=y_pred_spectral)
plt.title('Spectral Clustering')
plt.show()
```

```{python}
df=pd.DataFrame([accuracy_score(y,y_pred_dbscan),accuracy_score(y,y_pred_af),accuracy_score(y,y_pred_birch),accuracy_score(y,y_pred_spectral)])
df
```
