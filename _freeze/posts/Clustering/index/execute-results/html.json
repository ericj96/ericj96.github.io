{
  "hash": "0d7b66c6b386f52afa2fead5f1ddc1bf",
  "result": {
    "markdown": "---\ntitle: \"Clustering\"\nauthor: \"Eric Jackson\"\ndate: \"2023-10-01\"\ncategories: [clustering]\nimage: \"image.jpg\"\ntoc: true\ntoc-depth: 2\n---\n\n# Background\n\nClustering is an\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Setup and imports\"}\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_blobs,make_circles\nfrom sklearn import cluster \nfrom sklearn.cluster import KMeans,DBSCAN\nfrom itertools import cycle, islice\nfrom sklearn.metrics import confusion_matrix,accuracy_score\n```\n:::\n\n\n# Clustering Algorithms\n\n## Density-Based Spatial Clustering of Applications with Noise (DBSCAN)\n\nAs explored in the [blog post on anomaly/outlier detection](https://ericj96.github.io/posts/Anomaly_Outlier_Detection/), the DBSCAN algorithm is a widely used machine learning algorithm for clustering given sets of points by grouping together points that are close together and have multiple nearest neighbors. While creating the clusters of the data, it will naturally identify outliers and thus, is a great algorithm to accomplish both outlier detection and clustering.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nnoisy_circles = make_circles(n_samples=2000, factor=0.5, noise=0.05)\nx=noisy_circles[0]\ny=noisy_circles[1]\ndbscan=DBSCAN(eps=0.2)\ndbscan.fit(x)\ncolors = dbscan.labels_\ny_pred_dbscan=colors\n```\n:::\n\n\n## Affinity Propagation\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\naffinity_propagation = cluster.AffinityPropagation(damping=.9,preference=-300)\naffinity_propagation.fit(x)\ny_pred_af=affinity_propagation.labels_\n```\n:::\n\n\n## BIRCH\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nbirch = cluster.Birch(n_clusters=2)\nbirch.fit(x)\ny_pred_birch=birch.labels_\n```\n:::\n\n\n## Spectral Clustering\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nspectral = cluster.SpectralClustering(n_clusters=2)\nspectral.fit(x)   \ny_pred_spectral=spectral.labels_\n```\n:::\n\n\n# Conclusion\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"All 4 subplot code\"}\nfig, ax = plt.subplots(2,2,figsize=(9,8))\nax1=plt.subplot(221)\nplt.scatter(x[:,0],x[:,1],c=y_pred_dbscan)\nplt.title('DBSCAN')\nax1=plt.subplot(222)\nplt.scatter(x[:,0],x[:,1],c=y_pred_af)\nplt.title('Affinity Propagation')\nax1=plt.subplot(223)\nplt.scatter(x[:,0],x[:,1],c=y_pred_birch)\nplt.title('BIRCH')\nax1=plt.subplot(224)\nplt.scatter(x[:,0],x[:,1],c=y_pred_spectral)\nplt.title('Spectral Clustering')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=731 height=653}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf=pd.DataFrame([accuracy_score(y,y_pred_dbscan),accuracy_score(y,y_pred_af),accuracy_score(y,y_pred_birch),accuracy_score(y,y_pred_spectral)])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.3445</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.5035</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.4955</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}